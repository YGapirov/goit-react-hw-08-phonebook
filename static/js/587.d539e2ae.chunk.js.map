{"version":3,"file":"static/js/587.d539e2ae.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.styled.js","pages/Contacts.js"],"sourcesContent":["import { Field, Form, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  /* margin-top: 18px; */\n  margin-bottom: 36px;\n`;\nexport const StyleField = styled(Field)`\n  display: block;\n  margin: 8px 0;\n  padding: 8px;\n  font-size: 16px;\n  border-radius: 4px;\n  border: 1px solid gray;\n`;\n\nexport const StyledButton = styled.button`\n  width: 100px;\n  margin-top: 18px;\n  padding: 5px;\n  border-radius: 10px;\n  border: none;\n  /* background-color: whitesmoke; */\n  box-shadow: 0 1px 7px grey;\n  background-color: navy;\n  color: white;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n    cursor: pointer;\n  }\n`;\n\nexport const StyledWrapper = styled.div`\n  /* padding-left: 28px; */\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n  font-weight: bold;\n`;\n\nexport const Label = styled.label`\n  color: darkgray;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyleField,\n  StyledButton,\n  StyledWrapper,\n  StyledError,\n  Label,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from '../../redux/operations';\nimport { selectContacts } from '../../redux/selectors';\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[\\p{L} ']+$/u, 'Only letters are allowed')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^(\\d{2,}-\\d{2,}-\\d{2,}|\\d{2,}-\\d{2,}|\\d{5,})$/,\n      'It must be min 5 numbers (1234567 or 123-45-67)'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmitContact = values => {\n    const { name, number } = values;\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already on contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number })); //якщо контакта такого нема, діспатчить  новий контакт в список\n  };\n\n  return (\n    <StyledWrapper>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={formSchema}\n        onSubmit={(values, actions) => {\n          handleSubmitContact(values);\n          actions.resetForm();\n        }}\n      >\n        <StyledForm>\n          <Label>\n            Name\n            <StyleField type=\"text\" name=\"name\" />\n            <StyledError name=\"name\" component=\"p\" />\n          </Label>\n\n          <Label>\n            Number\n            <StyleField type=\"tel\" name=\"number\" />\n            <StyledError name=\"number\" component=\"p\" />\n          </Label>\n\n          <StyledButton type=\"submit\">Add contact</StyledButton>\n        </StyledForm>\n      </Formik>\n    </StyledWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  border-radius: 4px;\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  padding-top: 12px;\n  color: darkblue;\n`;\n\nexport const Btn = styled.button`\n  width: 60px;\n  border-radius: 10px;\n  border: none;\n  background-color: white;\n  box-shadow: 0 1px 7px grey;\n  background-color: navy;\n  color: white;\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n    cursor: pointer;\n  }\n`;\n","import { Item, Btn } from './ContactCard.styled';\n\nexport const ContactCard = ({ contact: { id, name, number }, onDelete }) => {\n  return (\n    <Item key={id}>\n      <span>{name}: </span>\n      <span>{number} </span>\n      <Btn type=\"button\" onClick={() => onDelete(id)}>\n        Delete\n      </Btn>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-width: 280px;\n`;\n","import { ContactCard } from '../ContactCard/ContactCard';\nimport { List } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { deleteContact } from '../../redux/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ContactCard\n          key={contact.id}\n          contact={contact}\n          onDelete={() => handleDelete(contact.id)} // Передаємо проп onDelete з відповідним ID\n        />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  color: darkgray;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin: 14px 0;\n  padding: 8px;\n  font-size: 16px;\n  border-radius: 4px;\n  border: 1px solid gray;\n  background-color: white;\n`;\n","import { Label, Input } from './Filter.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterPhone } from '../../redux/filterSlice';\nimport { selectFilter } from '../../redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter); // Отримання значення filter зі стану Redux\n\n  const updateFilter = value => {\n    dispatch(filterPhone(value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search\"\n        value={filter}\n        onChange={e => updateFilter(e.target.value)}\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsWrapper = styled.div`\n  border: 2px solid darkblue;\n  border-radius: 4px;\n  /* width: 960px; */\n  max-width: 400px;\n  margin: 36px auto 0px;\n  padding: 28px;\n  background-color: whitesmoke;\n`;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\nimport { selectIsLoading } from '../redux/selectors';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactsWrapper } from './Contacts.styled';\nimport { Loader } from '../components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); // Виконуємо запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <ContactsWrapper>\n      <ContactForm />\n      <Filter />\n      <h4>Your contacts:</h4>\n      {isLoading && <Loader isLoading={isLoading} />}\n      <ContactList />\n    </ContactsWrapper>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyleField","Field","_templateObject2","StyledButton","_templateObject3","StyledWrapper","_templateObject4","StyledError","ErrorMessage","_templateObject5","Label","_templateObject6","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","formSchema","Yup","shape","matches","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","some","alert","concat","addContact","handleSubmitContact","resetForm","_jsxs","type","component","Item","Btn","ContactCard","_ref","_ref$contact","id","onDelete","onClick","List","ContactList","map","deleteContact","Input","Filter","placeholder","value","onChange","e","target","filterPhone","ContactsWrapper","Contacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}